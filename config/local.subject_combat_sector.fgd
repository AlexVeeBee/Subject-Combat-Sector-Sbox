
@BaseClass = BaseProperties_local_subject_combat_sector
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// AssignTeamTrigger
//
@SolidClass base(BaseProperties_local_subject_combat_sector) tags( SupportsSolids, Trigger ) model() 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= scs_assignteam : "Behaves like a teleporter but assigns the player to a team"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	assignment(choices) : "Team Assign" : 0 : "Assign the player to the team" =
	[
		0 : "Unspecified"
		1 : "Red"
		2 : "Blue"
		3 : "Green"
		4 : "Yellow"
	]
	target(string) : "Remote Destination" :  : "The entity specifying a location to which entities should be teleported to."
	teleport_relative(boolean) : "Teleport Relatively" : 0 : "If set, teleports the entity with an offset depending on where the entity was in the trigger teleport. Think world portals. Place the target entity accordingly."
	keep_velocity(boolean) : "Keep Velocity" : 0 : "If set, the teleported entity will not have it's velocity reset to 0."
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnTriggered(void) : "Fired when the trigger teleports an entity"
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// NPCSpawner
//
@PointClass base(BaseProperties_local_subject_combat_sector) editormodel( "models/citizen/citizen.vmdl" ) 
metadata
{
	entity_tool_name = "NPC Spawnpoint"
	entity_tool_group = "Subject Combat Sector"
	entity_tool_tip = "Defines a point where NPCs can spawn"
}
= info_scs_npc_spawner : ""
[
	teamenum(choices) : "Team Side" : 0 : "Which side is this NPC spawner on" =
	[
		0 : "Unknown"
		1 : "Red"
		2 : "Blue"
		3 : "Green"
		4 : "Yellow"
	]
]

//
// TeamCrystalBox
//
@PointClass base(BaseProperties_local_subject_combat_sector) editormodel( "models/game/crystal_box.vmdl" ) = scs_crystalbox : ""
[
	assigncrystalboxteam(choices) : "Team Box Assignment" : 0 : "Assigns the box to the selected team" =
	[
		0 : "Unknown"
		1 : "Red"
		2 : "Blue"
		3 : "Green"
		4 : "Yellow"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input RandomizeStats(void) : ""
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// TeamPoints
//
@PointClass base(BaseProperties_local_subject_combat_sector) = scs_teampoints : ""
[
	teampointenum(choices) : "Team Point Assigned" : 0 : "Which side will the points belong to" =
	[
		0 : "Unknown"
		1 : "Red"
		2 : "Blue"
		3 : "Green"
		4 : "Yellow"
	]

	input SetPoints(integer) : ""
	input AddPoints(integer) : ""
	input SubtractPoints(integer) : ""
]

//
// TPDest
//
@PointClass base(BaseProperties_local_subject_combat_sector) editormodel( "models/editor/playerstart.vmdl" ) 
metadata
{
	entity_tool_name = "Teleport Destination"
	entity_tool_group = "Subject Combat Sector"
	entity_tool_tip = "Exactly like teleport_destination, does nothing else"
}
= scs_tpdest : ""
[
]

//
// TriggerCrystalBox
//
@SolidClass base(BaseProperties_local_subject_combat_sector) tags( SupportsSolids, Trigger ) model() 
metadata
{
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= scs_trigger_crystalbox_enhance : "A trigger multiple that does specific actions"
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	upgrader(boolean) : "Is Upgrader" : 0 : "Should this be an upgrade trigger"
	teampointenum(choices) : "Team Trigger Assigned" : 0 : "Which side does this trigger belong to" =
	[
		0 : "Unknown"
		1 : "Red"
		2 : "Blue"
		3 : "Green"
		4 : "Yellow"
	]
	wait(float) : "Delay before reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once). This affects OnTrigger output."
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnTrigger(void) : "Called every \"Delay before reset\" seconds as long as at least one entity that passes filters is touching this trigger"
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

